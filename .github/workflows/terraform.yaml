name: 'Terraform AWS EKS'

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #     - stage
  #   paths:
  #     - 'terraform/**'
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'terraform/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: 'us-east-1'
  EKS_CLUSTER: 'contour-eks'

jobs:
  terraform:
    name: 'Apply terraform code changes'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        # with:
        #   terraform_version: ${{ env.TF_VERSION }}


      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -out=planfile
        continue-on-error: true
      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed"
          exit 1

      - name: Terraform Apply
        id: apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        id: kubeconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{env.EKS_CLUSTER}}

      - name: Verify kubernetes connection
        run: |
          kubectl get nodes
          kubectl cluster-info

      - name: Install Contour Ingress Controller
        if: steps.apply.outcome == 'success' && steps.kubeconfig.outcome == 'success'
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0-beta.0/deploy/static/provider/aws/deploy.yaml
